# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Order {
  _id: ID!
  status: OrderStatus!
  partnerId: String
  adminId: String
  clientId: String!
  driverId: String
  amount: Float!
  description: String!
  comment: String!
  delayReason: String!
  incidentDescription: CommonIncidentDescriptions
  customIncidentDescription: String
  fraisLivraison: Float!
  attemptCount: Float!
  region: TunisianRegion
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

"""Status of the order"""
enum OrderStatus {
  PENDING
  IN_CENTRAL_WAREHOUSE
  ASSIGNED
  OUT_FOR_DELIVERY
  DELIVERED
  DELIVERY_FAILED
  RETURNED
  CANCELED
  PENDING_RESOLUTION
  FOLLOW_UP
  DELAYED
  PARTIALLY_DELIVERED
  IN_WAREHOUSE
  AWAITING_CONFIRMATION
  VERIFICATION
}

"""Incident descriptions of the order"""
enum CommonIncidentDescriptions {
  COLIS_ENDOMMAGE
  ADRESSE_INCORRECTE
  CLIENT_INTROUVABLE
  COLIS_PERDU
  RETARD_METEO
  RETARD_TRAFIC
  COLIS_REFUSE
  AUTRE
}

"""Les 24 r√©gions de la Tunisie"""
enum TunisianRegion {
  ARIANA
  BEJA
  BEN_AROUS
  BIZERTE
  GABES
  GAFSA
  JENDOUBA
  KAIROUAN
  KASSERINE
  KEBILI
  KEF
  MAHDIA
  MANOUBA
  MEDENINE
  MONASTIR
  NABEUL
  SFAX
  SIDI_BOUZID
  SILIANA
  SOUSSE
  TATAOUINE
  TOZEUR
  TUNIS
  ZAGHOUAN
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Course {
  _id: ID!
  orderIds: [String!]!
  driverId: String!
  adminId: String
  assistantId: String
  status: OrderStatus!
  pointDepart: String!
  pointArrivee: [String!]!
  distance: Float!
  duree: Float!
  dateDepart: DateTime!
  dateArrivee: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderStatusCount {
  status: String
  count: Float
}

type History {
  _id: ID!
  orderId: String!
  adminId: String
  assisatnAdminId: String
  driverId: String
  partnerId: String
  event: String!
  etatPrecedent: String
  timestamp: DateTime!
}

type GeoJSON {
  type: String!
  coordinates: [[Float!]!]!
}

type Route {
  distance: Float!
  duration: Float!
  geometry: GeoJSON!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

type Incident {
  _id: ID!
  orderId: Order!
  reportedBy: String!
  incidentType: incidentType!
  customDescription: String
  description: String!
  images: [String!]
  status: IncidentStatus
  priority: IncidentPriority
  comments: [CommentInfo!]
  resolvedBy: String!
  resolvedAt: DateTime
  resolutionNotes: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Incident type enum"""
enum incidentType {
  DAMAGED_PACKAGE
  INCORRECT_ADDRESS
  CUSTOMER_NOT_FOUND
  LOST_PACKAGE
  WEATHER_DELAY
  TRAFFIC_DELAY
  REFUSED_PACKAGE
  OTHER
}

"""Incident status enum"""
enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

"""Incident priority enum"""
enum IncidentPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

type CommentInfo {
  comment: String!
  userId: String!
  createdAt: DateTime!
}

type IncidentTypeCount {
  _id: String!
  count: Int!
}

type IncidentStatsType {
  totalIncidents: Int!
  openIncidents: Int!
  inProgressIncidents: Int!
  resolvedIncidents: Int!
  incidentsByType: [IncidentTypeCount!]!
}

type Query {
  orders: [Order!]!
  order(id: String!): Order!
  countByPartner(id: String!): [OrderStatusCount!]!
  getOrdersByPartnerId(partnerId: String!): [Order!]!
  getOrdersByClient(clientId: String!): [Order!]!
  ordersByStatus(status: OrderStatus!): [Order!]!
  getOrdersByIncident: [Order!]!
  getOrdersCountByStatus: [OrderStatusCount!]!
  orderHistory(orderId: String!): [History!]!
  courses: [Course!]!
  course(id: String!): Course!
  getDriverLocation(driverId: String!): Coordinates!
  getCoordinatesFromAddress(address: String!): Coordinates!
  getAddressFromCoordinates(latitude: Float!, longitude: Float!): String!
  calculateOptimalRoute(driverId: String!, input: CalculateRouteInput!): Route!
  getIncidentsByOrderId(orderId: String!): [Incident!]!
  getAll: [Incident!]!
  getIncidentById(incidentId: String!): Incident!
  getIncidentStats: IncidentStatsType!
}

input CalculateRouteInput {
  destinationLatitude: Float!
  destinationLongitude: Float!
}

type Mutation {
  createOrder(createOrderInput: CreateOrderInput!): Order!
  assignOrdersToDriver(orderIds: [String!]!, driverId: String!): [Order!]!
  updateOrderStatus(orderId: String!, status: OrderStatus!): Order!
  removeOrder(id: String!): Order!
  reportIncident(input: ReportIncidentInput!): Order!
  recordDeliveryAttempt(orderId: String!): Order!
  reportVerificationIncident(orderId: String!, incidentType: CommonIncidentDescriptions!): Order!
  createHistory(input: CreateHistoryInput!): History!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(id: String!, updateCourseInput: UpdateCourseInput!): Course!
  removeCourse(id: String!): Course!
  updateDriverLocation(input: UpdateDriverLocationInput!): Boolean!
  createIncident(input: CreateIncidentInput!): Incident!
  updateIncident(input: UpdateIncidentInput!): Incident!
}

input CreateOrderInput {
  status: OrderStatus! = PENDING
  clientId: String!
  amount: Float!
  description: String!
  comment: String!
  fraisLivraison: Float!
  region: TunisianRegion!
}

input ReportIncidentInput {
  orderId: String!
  commonIncidentType: CommonIncidentDescriptions
  customIncidentDescription: String
}

input CreateHistoryInput {
  orderId: String!
  adminId: String
  assisatnAdminId: String
  driverId: String
  partnerId: String
  event: String!
  etatPrecedent: String
}

input CreateCourseInput {
  orderIds: [String!]!
  driverId: String
  adminId: String
  assistantId: String!
  status: OrderStatus!
  pointDepart: String!
  pointArrivee: [String!]!
  distance: Float!
  duree: Float!
  dateDepart: DateTime!
  dateArrivee: DateTime!
}

input UpdateCourseInput {
  orderIds: [String!]
  driverId: String
  adminId: String
  assistantId: String
  status: OrderStatus
  pointDepart: String
  pointArrivee: [String!]
  distance: Float
  duree: Float
  dateDepart: DateTime
  dateArrivee: DateTime
}

input UpdateDriverLocationInput {
  driverId: String!
  latitude: Float!
  longitude: Float!
}

input CreateIncidentInput {
  orderId: String!
  incidentType: incidentType
  customDescription: String
  description: String!
  images: [String!]
  priority: IncidentPriority
}

input UpdateIncidentInput {
  incidentId: String!
  status: IncidentStatus
  priority: IncidentPriority
  comment: String
  resolutionNotes: String
}